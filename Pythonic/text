= Pythonic

**P**表示pythonic的写法，**NP**表示non-pythonic的写法

== P vs. NP的示例

=== 链式比较

**P**:
<<code python>>
a = 3
b = 1 
 
1 <= b <= a < 10  #True
<</code>>

**NP**:
<<code python>>
b >= 1 and b <= a and a < 10 #True
<</code>>

P简单直接省代码~

=== 真值测试

**P**:
<<code python>>
name = 'Tim'
langs = ['AS3', 'Lua', 'C']
info = {'name': 'Tim', 'sex': 'Male', 'age':23 }    
 
if name and langs and info:
    print('All True!')  #All True!
<</code>>

**NP**:
<<code python>>
if name != '' and len(langs) > 0 and info != {}:
    print('All True!') #All True!
<</code>>

P直接判断其真假，无需写判断条件，这样既能保证正确性，又能减少代码量。

|=真 |=假|
|真|假|
|True|False|
|任意非空字符串|空的字符串 ##''##|
|任意非0数字|数字##0##|
|任意非空容器|空的容器 ##[]## ##()## ##{}## ##set()##|
|其他任意非False|None|


=== 字符串反转

**P**:
<<code python>>
def reverse_str( s ):
    return s[::-1]  
<</code>>

**NP**:
<<code python>>
def reverse_str( s ):
    t = ''
    for x in xrange(len(s)-1,-1,-1):
        t += s[x]
    return t
<</code>>

P的写法简单，经测试，效率也更好。
如果用于检测回文，就是一句话##input == input[::-1]##，多么的优雅！

=== 字符串列表的连接

**P**:
<<code python>>
strList = ["Python", "is", "good"]  
 
res =  ' '.join(strList) #Python is good
<</code>>

**NP**:
<<code python>>
res = ''
for s in strList:
    res += s + ' '
#Python is good 
#最后还有个多余空格
<</code>>

##string.join()##常用于连接列表里的字符串，相对于NP，P的方式十分高效，且不会犯错。


=== 列表求和，最大值，最小值，乘积

**P**:
<<code python>>
numList = [1,2,3,4,5]   
 
sum = sum(numList)  #sum = 15
maxNum = max(numList) #maxNum = 5
minNum = min(numList) #minNum = 1
from operator import mul
prod = reduce(mul, numList, 1) #prod = 120 默认值传1以防空列表报错
<</code>>

**NP**:
<<code python>>
sum = 0
maxNum = -float('inf')
minNum = float('inf')
prod = 1
for num in numList:
    if num > maxNum:
        maxNum = num
    if num < minNum:
        minNum = num
    sum += num
    prod *= num
# sum = 15 maxNum = 5 minNum = 1 prod = 120
<</code>>

P比NP更又效率。


=== 列表推导式

**P**:
<<code python>>
l = [x*x for x in range(10) if x % 3 == 0]
#l = [0, 9, 36, 81]
<</code>>

**NP**:
<<code python>>
l = []
for x in range(10):
    if x % 3 == 0:
        l.append(x*x)
#l = [0, 9, 36, 81]
<</code>>


=== 字典的默认值

**P**:
<<code python>>
dic = {'name':'Tim', 'age':23}  
 
dic['workage'] = dic.get('workage',0) + 1
#dic = {'age': 23, 'workage': 1, 'name': 'Tim'}
<</code>>

**NP**:
<<code python>>
if 'workage' in dic:
    dic['workage'] += 1
else:
    dic['workage'] = 1
#dic = {'age': 23, 'workage': 1, 'name': 'Tim'}
<</code>>

dict的##get(key,default)##方法用于获取字典中key的值，若不存在该key，则将key赋默认值default。


=== for…else…语句

**P**:
<<code python>>
for x in xrange(1,5):
    if x == 5:
        print 'find 5'
        break
else:
    print 'can not find 5!'
#can not find 5! 
<</code>>

**NP**:
<<code python>>
find = False
for x in xrange(1,5):
    if x == 5:
        find = True
        print 'find 5'
        break
if not find:
    print 'can not find 5!'
#can not find 5!
<</code>>

##for...else...##的else部分用来处理没有从for循环中断的情况。有了它，我们不用设置状态变量来检查是否for循环有break出来，简单方便。


=== 三元符的替代

**P**:
<<code python>>
a = 3   
 
b = 2 if a > 2 else 1
#b = 2
<</code>>

**NP**:
<<code python>>
if a > 2:
    b = 2
else:
    b = 1
#b = 2
<</code>>


=== Enumerate

**P**:
<<code python>>
array = [1, 2, 3, 4, 5]
 
for i, e in enumerate(array,0):
    print i, e
#0 1
#1 2
#2 3
#3 4
#4 5 
<</code>>

**NP**:
<<code python>>
for i in xrange(len(array)):
    print i, array[i]
#0 1
#1 2
#2 3
#3 4
#4 5 
<</code>>

使用enumerate可以一次性将索引和值取出，避免使用索引来取值，而且enumerate的第二个参数可以调整索引下标的起始位置，默认为0。


=== 使用zip创建键值对

**P**:
<<code python>>
keys = ['Name', 'Sex', 'Age']
values = ['Tim', 'Male', 23]
 
dic = dict(zip(keys, values))
#{'Age': 23, 'Name': 'Tim', 'Sex': 'Male'}
<</code>>

**NP**:
<<code python>>
dic = {}
for i,e in enumerate(keys):
    dic[e] = values[i]
#{'Age': 23, 'Name': 'Tim', 'Sex': 'Male'}
<</code>>

zip方法返回的是一个元组，用它来创建键值对，简单明了。

Ref: http://wuzhiwei.net/be_pythonic/